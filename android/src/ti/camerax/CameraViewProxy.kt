/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2020 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package ti.camerax

import android.app.Activity
import android.os.Build
import androidx.annotation.RequiresApi
import androidx.camera.core.ImageCapture
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.common.Log
import org.appcelerator.kroll.common.TiConfig
import org.appcelerator.titanium.proxy.TiViewProxy
import org.appcelerator.titanium.view.TiUIView

@RequiresApi(Build.VERSION_CODES.LOLLIPOP)
@Kroll.proxy(creatableInModule = TiCameraxModule::class)
class CameraViewProxy : TiViewProxy() {

    private lateinit var imageCapture: ImageCapture
    lateinit var camView: CameraView
    var isProcessing: Boolean = false
    var focusMode: Int = 0
    var torchValue: Int = 0

    companion object {
        // Standard Debugging variables
        private const val LCAT = "CameraViewProxy"
        private val DBG = TiConfig.LOGD
    }

    override fun createView(activity: Activity): TiUIView {
        camView = CameraView(this)
        view = camView
        view.layoutParams.autoFillsHeight = true
        view.layoutParams.autoFillsWidth = true
        return view
    }

    // Handle creation options
    override fun handleCreationDict(options: KrollDict) {
        super.handleCreationDict(options)
        if (options.containsKey("formats")) {
            Log.d(LCAT, "example created with message: " + options["formats"])
        }
    }

    @Kroll.setProperty
    fun setFormats(params: KrollDict) {
        var myList: MutableList<Int> = mutableListOf<Int>()

        for (number in params) {
            myList.add(number.value as Int)
        }
        camView.setFormat(myList)
    }

    @Kroll.setProperty
    fun focusMode(param: Int) {
        focusMode = param
		camView.autoFocus = focusMode != TiCameraxModule.FOCUS_MODE_LOCKED
    }

    @Kroll.setProperty
    fun torchMode(param: Int) {
        torchValue = param
        camView.setTorch(torchValue)
    }

    @Kroll.getProperty
    fun torchMode(): Int {
        return torchValue
    }


    @Kroll.setProperty
    fun setisFrontCameraActive(value: Boolean) {
        camView.switchCamera(value)
    }

    @Kroll.setProperty
    fun setIsProcessing(value: Boolean) {
        isProcessing = value
    }

    @Kroll.getProperty
    fun getIsProcessing(): Boolean {
        return isProcessing
    }

    // Methods

    @Kroll.method
    fun start() {
		camView.startCamera()
    }

    @Kroll.method
    fun stop() {
		camView.stopCamera()
    }

}
